generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  userId String  @unique
  owner  User    @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  Username  String
  Password  String
  Email     String
  Profile   Profile?
}

model Comment {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  content   String 
}

model Track{
  id        String @id @default(cuid())
  title     String
  artists   TracksOnArtists[]
  description String
  url       String
  waveData   String?
  artworkUrl String
  bannerUrl String
  vinyls    TracksOnVinyl[]
}

model Artist {
  id        Int @id @default(autoincrement())
  artistName String
  name String
  surname String
  tracks TracksOnArtists[]
}

model TracksOnVinyl {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  trackId   String @unique
  vinylId   String  @unique
  track     Track   @relation(fields: [trackId], references: [id])
  vinyl     Vinyl   @relation(fields: [vinylId], references: [id])
}

model TracksOnArtists {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  trackId   String
  artistId  Int   @unique
  track     Track   @relation(fields: [trackId], references: [id])
  artist    Artist  @relation(fields: [artistId], references: [id])
}

model Vinyl {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  tracks    TracksOnVinyl[]
  title     String
  artistId  Int
  description String?
  url       String
  artworkUrl String
  bannerUrl String?
  price    Int @default(15)
  stock    Int @default(0)
}
